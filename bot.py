import telebot
from telebot import types
import requests
import openai
import json

# –í–°–¢–ê–í–¨ –°–í–û–ò –¢–û–ö–ï–ù–´ –°–Æ–î–ê
TELEGRAM_BOT_TOKEN = '7753608741:AAGuR4R7wwwPKLgViJ-_nwnBLVk-FJ4r7KQ'
OPENAI_API_KEY = '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'
WEATHER_API_KEY = 'd7e728fd470cf320b445cd02e20d135f'
YOUTUBE_API_KEY = 'AIzaSyB3b6v9KDVlzjZNK63hcWfXcREULQ9e1n0'

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
openai.api_key = OPENAI_API_KEY

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_schedules = {}

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–¥–ª—è /help –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫)
COMMANDS = {
    'start': '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º',
    'help': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
    'weather': '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ',
    'ask': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ChatGPT',
    'schedule_add': '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
    'schedule_view': '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
    'youtube': '–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ YouTube'
}

# –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["/weather", "/ask", "/schedule_add", "/schedule_view", "/youtube", "/help"]
    markup.add(*buttons)
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:", reply_markup=markup)
    send_help(message)

# –ü–æ–º–æ—â—å
@bot.message_handler(commands=['help'])
def send_help(message):
    text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
    for cmd, desc in COMMANDS.items():
        text += f"/{cmd} ‚Äî {desc}\n"
    bot.send_message(message.chat.id, text)

# –ü–æ–≥–æ–¥–∞
@bot.message_handler(commands=['weather'])
def weather(message):
    msg = bot.send_message(message.chat.id, "üåç –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:")
    bot.register_next_step_handler(msg, get_weather)

def get_weather(message):
    city = message.text
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        weather_text = f"üå¶ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']}¬∞C\n" \
                       f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['main']['feels_like']}¬∞C\n" \
                       f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['weather'][0]['description']}"
        bot.send_message(message.chat.id, weather_text)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# ChatGPT
@bot.message_handler(commands=['ask'])
def ask(message):
    msg = bot.send_message(message.chat.id, "üí¨ –í–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å –¥–ª—è ChatGPT:")
    bot.register_next_step_handler(msg, gpt_answer)

def gpt_answer(message):
    question = message.text
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –ò–ª–∏ gpt-4o –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
            messages=[{"role": "user", "content": question}],
            max_tokens=500
        )
        answer = response.choices[0].message['content'].strip()
        bot.send_message(message.chat.id, f"ü§ñ –û—Ç–≤–µ—Ç:\n{answer}")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@bot.message_handler(commands=['schedule_add'])
def schedule_add(message):
    msg = bot.send_message(message.chat.id, "üóì –í–≤–µ–¥–∏ —Å–æ–±—ã—Ç–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 14:00 ‚Äî –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞):")
    bot.register_next_step_handler(msg, save_schedule)

def save_schedule(message):
    user_id = message.chat.id
    event = message.text
    if user_id not in user_schedules:
        user_schedules[user_id] = []
    user_schedules[user_id].append(event)
    bot.send_message(message.chat.id, "‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!")

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(commands=['schedule_view'])
def schedule_view(message):
    user_id = message.chat.id
    if user_id in user_schedules and user_schedules[user_id]:
        text = "üóì –¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
        text += "\n".join(user_schedules[user_id])
    else:
        text = "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."
    bot.send_message(message.chat.id, text)

# –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ YouTube
@bot.message_handler(commands=['youtube'])
def youtube(message):
    msg = bot.send_message(message.chat.id, "üîé –í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ YouTube:")
    bot.register_next_step_handler(msg, search_youtube)

def search_youtube(message):
    query = message.text
    url = f"https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=3&q={query}&key={YOUTUBE_API_KEY}&type=video"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        videos = data.get('items', [])
        if not videos:
            bot.send_message(message.chat.id, "‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        text = "üìπ –í–æ—Ç —á—Ç–æ –Ω–∞—à–ª–æ—Å—å –Ω–∞ YouTube:\n\n"
        for video in videos:
            title = video['snippet']['title']
            video_id = video['id']['videoId']
            link = f"https://youtu.be/{video_id}"
            text += f"{title}\n{link}\n\n"
        bot.send_message(message.chat.id, text)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
bot.infinity_polling()



